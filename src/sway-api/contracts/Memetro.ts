/* Autogenerated file. Do not edit manually. */

/* eslint-disable max-classes-per-file */
/* eslint-disable @typescript-eslint/no-unused-vars */
/* eslint-disable @typescript-eslint/consistent-type-imports */

/*
  Fuels version: 0.94.8
*/

import { Contract, Interface } from "fuels";
import type {
  Provider,
  Account,
  StorageSlot,
  AbstractAddress,
  BigNumberish,
  BN,
  FunctionFragment,
  InvokeFunction,
} from 'fuels';

import type { Enum } from "./common";

export enum CreationErrorInput { DurationCannotBeZero = 'DurationCannotBeZero', InvalidAcceptancePercentage = 'InvalidAcceptancePercentage' };
export enum CreationErrorOutput { DurationCannotBeZero = 'DurationCannotBeZero', InvalidAcceptancePercentage = 'InvalidAcceptancePercentage' };
export type IdentityInput = Enum<{ Address: AddressInput, ContractId: ContractIdInput }>;
export type IdentityOutput = Enum<{ Address: AddressOutput, ContractId: ContractIdOutput }>;
export enum InitializationErrorInput { CannotReinitialize = 'CannotReinitialize', ContractNotInitialized = 'ContractNotInitialized' };
export enum InitializationErrorOutput { CannotReinitialize = 'CannotReinitialize', ContractNotInitialized = 'ContractNotInitialized' };
export enum ProposalErrorInput { InsufficientApprovals = 'InsufficientApprovals', ProposalExecuted = 'ProposalExecuted', ProposalExpired = 'ProposalExpired', ProposalStillActive = 'ProposalStillActive' };
export enum ProposalErrorOutput { InsufficientApprovals = 'InsufficientApprovals', ProposalExecuted = 'ProposalExecuted', ProposalExpired = 'ProposalExpired', ProposalStillActive = 'ProposalStillActive' };
export enum UserErrorInput { AmountCannotBeZero = 'AmountCannotBeZero', IncorrectAssetSent = 'IncorrectAssetSent', InsufficientBalance = 'InsufficientBalance', InvalidId = 'InvalidId', VoteAmountCannotBeZero = 'VoteAmountCannotBeZero' };
export enum UserErrorOutput { AmountCannotBeZero = 'AmountCannotBeZero', IncorrectAssetSent = 'IncorrectAssetSent', InsufficientBalance = 'InsufficientBalance', InvalidId = 'InvalidId', VoteAmountCannotBeZero = 'VoteAmountCannotBeZero' };

export type AddressInput = { bits: string };
export type AddressOutput = AddressInput;
export type AssetIdInput = { bits: string };
export type AssetIdOutput = AssetIdInput;
export type CallDataInput = { arguments: BigNumberish, function_selector: BigNumberish, id: ContractIdInput };
export type CallDataOutput = { arguments: BN, function_selector: BN, id: ContractIdOutput };
export type ContractIdInput = { bits: string };
export type ContractIdOutput = ContractIdInput;
export type CreateProposalEventInput = { id: BigNumberish, proposal_info: ProposalInfoInput };
export type CreateProposalEventOutput = { id: BN, proposal_info: ProposalInfoOutput };
export type DepositEventInput = { amount: BigNumberish, user: IdentityInput };
export type DepositEventOutput = { amount: BN, user: IdentityOutput };
export type ExecuteEventInput = { acceptance_percentage: BigNumberish, id: BigNumberish, user: IdentityInput };
export type ExecuteEventOutput = { acceptance_percentage: BN, id: BN, user: IdentityOutput };
export type InitializeEventInput = { author: IdentityInput, meme_coin_asset: AssetIdInput };
export type InitializeEventOutput = { author: IdentityOutput, meme_coin_asset: AssetIdOutput };
export type ProposalInput = { amount: BigNumberish, asset: AssetIdInput, call_data: CallDataInput, gas: BigNumberish };
export type ProposalOutput = { amount: BN, asset: AssetIdOutput, call_data: CallDataOutput, gas: BN };
export type ProposalInfoInput = { acceptance_percentage: BigNumberish, author: IdentityInput, deadline: BigNumberish, executed: boolean, no_votes: BigNumberish, proposal_transaction: ProposalInput, yes_votes: BigNumberish };
export type ProposalInfoOutput = { acceptance_percentage: BN, author: IdentityOutput, deadline: BN, executed: boolean, no_votes: BN, proposal_transaction: ProposalOutput, yes_votes: BN };
export type ThresholdReachedEventInput = { buyer: IdentityInput, total_value: BigNumberish };
export type ThresholdReachedEventOutput = { buyer: IdentityOutput, total_value: BN };
export type UnlockVotesEventInput = { id: BigNumberish, user: IdentityInput, vote_amount: BigNumberish };
export type UnlockVotesEventOutput = { id: BN, user: IdentityOutput, vote_amount: BN };
export type VoteEventInput = { id: BigNumberish, user: IdentityInput, vote_amount: BigNumberish };
export type VoteEventOutput = { id: BN, user: IdentityOutput, vote_amount: BN };
export type VotesInput = { no_votes: BigNumberish, yes_votes: BigNumberish };
export type VotesOutput = { no_votes: BN, yes_votes: BN };
export type WithdrawEventInput = { amount: BigNumberish, user: IdentityInput };
export type WithdrawEventOutput = { amount: BN, user: IdentityOutput };

const abi = {
  "encoding": "1",
  "types": [
    {
      "typeId": 0,
      "type": "()",
      "components": [],
      "typeParameters": null
    },
    {
      "typeId": 1,
      "type": "b256",
      "components": null,
      "typeParameters": null
    },
    {
      "typeId": 2,
      "type": "bool",
      "components": null,
      "typeParameters": null
    },
    {
      "typeId": 3,
      "type": "enum CreationError",
      "components": [
        {
          "name": "DurationCannotBeZero",
          "type": 0,
          "typeArguments": null
        },
        {
          "name": "InvalidAcceptancePercentage",
          "type": 0,
          "typeArguments": null
        }
      ],
      "typeParameters": null
    },
    {
      "typeId": 4,
      "type": "enum Identity",
      "components": [
        {
          "name": "Address",
          "type": 8,
          "typeArguments": null
        },
        {
          "name": "ContractId",
          "type": 11,
          "typeArguments": null
        }
      ],
      "typeParameters": null
    },
    {
      "typeId": 5,
      "type": "enum InitializationError",
      "components": [
        {
          "name": "CannotReinitialize",
          "type": 0,
          "typeArguments": null
        },
        {
          "name": "ContractNotInitialized",
          "type": 0,
          "typeArguments": null
        }
      ],
      "typeParameters": null
    },
    {
      "typeId": 6,
      "type": "enum ProposalError",
      "components": [
        {
          "name": "InsufficientApprovals",
          "type": 0,
          "typeArguments": null
        },
        {
          "name": "ProposalExecuted",
          "type": 0,
          "typeArguments": null
        },
        {
          "name": "ProposalExpired",
          "type": 0,
          "typeArguments": null
        },
        {
          "name": "ProposalStillActive",
          "type": 0,
          "typeArguments": null
        }
      ],
      "typeParameters": null
    },
    {
      "typeId": 7,
      "type": "enum UserError",
      "components": [
        {
          "name": "AmountCannotBeZero",
          "type": 0,
          "typeArguments": null
        },
        {
          "name": "IncorrectAssetSent",
          "type": 0,
          "typeArguments": null
        },
        {
          "name": "InsufficientBalance",
          "type": 0,
          "typeArguments": null
        },
        {
          "name": "InvalidId",
          "type": 0,
          "typeArguments": null
        },
        {
          "name": "VoteAmountCannotBeZero",
          "type": 0,
          "typeArguments": null
        }
      ],
      "typeParameters": null
    },
    {
      "typeId": 8,
      "type": "struct Address",
      "components": [
        {
          "name": "bits",
          "type": 1,
          "typeArguments": null
        }
      ],
      "typeParameters": null
    },
    {
      "typeId": 9,
      "type": "struct AssetId",
      "components": [
        {
          "name": "bits",
          "type": 1,
          "typeArguments": null
        }
      ],
      "typeParameters": null
    },
    {
      "typeId": 10,
      "type": "struct CallData",
      "components": [
        {
          "name": "arguments",
          "type": 23,
          "typeArguments": null
        },
        {
          "name": "function_selector",
          "type": 23,
          "typeArguments": null
        },
        {
          "name": "id",
          "type": 11,
          "typeArguments": null
        }
      ],
      "typeParameters": null
    },
    {
      "typeId": 11,
      "type": "struct ContractId",
      "components": [
        {
          "name": "bits",
          "type": 1,
          "typeArguments": null
        }
      ],
      "typeParameters": null
    },
    {
      "typeId": 12,
      "type": "struct CreateProposalEvent",
      "components": [
        {
          "name": "id",
          "type": 23,
          "typeArguments": null
        },
        {
          "name": "proposal_info",
          "type": 17,
          "typeArguments": null
        }
      ],
      "typeParameters": null
    },
    {
      "typeId": 13,
      "type": "struct DepositEvent",
      "components": [
        {
          "name": "amount",
          "type": 23,
          "typeArguments": null
        },
        {
          "name": "user",
          "type": 4,
          "typeArguments": null
        }
      ],
      "typeParameters": null
    },
    {
      "typeId": 14,
      "type": "struct ExecuteEvent",
      "components": [
        {
          "name": "acceptance_percentage",
          "type": 23,
          "typeArguments": null
        },
        {
          "name": "id",
          "type": 23,
          "typeArguments": null
        },
        {
          "name": "user",
          "type": 4,
          "typeArguments": null
        }
      ],
      "typeParameters": null
    },
    {
      "typeId": 15,
      "type": "struct InitializeEvent",
      "components": [
        {
          "name": "author",
          "type": 4,
          "typeArguments": null
        },
        {
          "name": "meme_coin_asset",
          "type": 9,
          "typeArguments": null
        }
      ],
      "typeParameters": null
    },
    {
      "typeId": 16,
      "type": "struct Proposal",
      "components": [
        {
          "name": "amount",
          "type": 23,
          "typeArguments": null
        },
        {
          "name": "asset",
          "type": 9,
          "typeArguments": null
        },
        {
          "name": "call_data",
          "type": 10,
          "typeArguments": null
        },
        {
          "name": "gas",
          "type": 23,
          "typeArguments": null
        }
      ],
      "typeParameters": null
    },
    {
      "typeId": 17,
      "type": "struct ProposalInfo",
      "components": [
        {
          "name": "acceptance_percentage",
          "type": 23,
          "typeArguments": null
        },
        {
          "name": "author",
          "type": 4,
          "typeArguments": null
        },
        {
          "name": "deadline",
          "type": 23,
          "typeArguments": null
        },
        {
          "name": "executed",
          "type": 2,
          "typeArguments": null
        },
        {
          "name": "no_votes",
          "type": 23,
          "typeArguments": null
        },
        {
          "name": "proposal_transaction",
          "type": 16,
          "typeArguments": null
        },
        {
          "name": "yes_votes",
          "type": 23,
          "typeArguments": null
        }
      ],
      "typeParameters": null
    },
    {
      "typeId": 18,
      "type": "struct ThresholdReachedEvent",
      "components": [
        {
          "name": "buyer",
          "type": 4,
          "typeArguments": null
        },
        {
          "name": "total_value",
          "type": 23,
          "typeArguments": null
        }
      ],
      "typeParameters": null
    },
    {
      "typeId": 19,
      "type": "struct UnlockVotesEvent",
      "components": [
        {
          "name": "id",
          "type": 23,
          "typeArguments": null
        },
        {
          "name": "user",
          "type": 4,
          "typeArguments": null
        },
        {
          "name": "vote_amount",
          "type": 23,
          "typeArguments": null
        }
      ],
      "typeParameters": null
    },
    {
      "typeId": 20,
      "type": "struct VoteEvent",
      "components": [
        {
          "name": "id",
          "type": 23,
          "typeArguments": null
        },
        {
          "name": "user",
          "type": 4,
          "typeArguments": null
        },
        {
          "name": "vote_amount",
          "type": 23,
          "typeArguments": null
        }
      ],
      "typeParameters": null
    },
    {
      "typeId": 21,
      "type": "struct Votes",
      "components": [
        {
          "name": "no_votes",
          "type": 23,
          "typeArguments": null
        },
        {
          "name": "yes_votes",
          "type": 23,
          "typeArguments": null
        }
      ],
      "typeParameters": null
    },
    {
      "typeId": 22,
      "type": "struct WithdrawEvent",
      "components": [
        {
          "name": "amount",
          "type": 23,
          "typeArguments": null
        },
        {
          "name": "user",
          "type": 4,
          "typeArguments": null
        }
      ],
      "typeParameters": null
    },
    {
      "typeId": 23,
      "type": "u64",
      "components": null,
      "typeParameters": null
    }
  ],
  "functions": [
    {
      "inputs": [],
      "name": "buy",
      "output": {
        "name": "",
        "type": 0,
        "typeArguments": null
      },
      "attributes": [
        {
          "name": "doc-comment",
          "arguments": [
            " Buy function: Allows users to buy meme coins before DAO initialization"
          ]
        },
        {
          "name": "payable",
          "arguments": []
        },
        {
          "name": "storage",
          "arguments": [
            "read",
            "write"
          ]
        }
      ]
    },
    {
      "inputs": [
        {
          "name": "meme_coin_asset",
          "type": 9,
          "typeArguments": null
        }
      ],
      "name": "constructor",
      "output": {
        "name": "",
        "type": 0,
        "typeArguments": null
      },
      "attributes": [
        {
          "name": "storage",
          "arguments": [
            "read",
            "write"
          ]
        }
      ]
    },
    {
      "inputs": [
        {
          "name": "acceptance_percentage",
          "type": 23,
          "typeArguments": null
        },
        {
          "name": "duration",
          "type": 23,
          "typeArguments": null
        },
        {
          "name": "proposal_transaction",
          "type": 16,
          "typeArguments": null
        }
      ],
      "name": "create_proposal",
      "output": {
        "name": "",
        "type": 0,
        "typeArguments": null
      },
      "attributes": [
        {
          "name": "storage",
          "arguments": [
            "read",
            "write"
          ]
        }
      ]
    },
    {
      "inputs": [],
      "name": "deposit",
      "output": {
        "name": "",
        "type": 0,
        "typeArguments": null
      },
      "attributes": [
        {
          "name": "payable",
          "arguments": []
        },
        {
          "name": "storage",
          "arguments": [
            "read",
            "write"
          ]
        }
      ]
    },
    {
      "inputs": [
        {
          "name": "proposal_id",
          "type": 23,
          "typeArguments": null
        }
      ],
      "name": "execute",
      "output": {
        "name": "",
        "type": 0,
        "typeArguments": null
      },
      "attributes": [
        {
          "name": "storage",
          "arguments": [
            "read",
            "write"
          ]
        }
      ]
    },
    {
      "inputs": [
        {
          "name": "amount",
          "type": 23,
          "typeArguments": null
        }
      ],
      "name": "sell",
      "output": {
        "name": "",
        "type": 0,
        "typeArguments": null
      },
      "attributes": [
        {
          "name": "doc-comment",
          "arguments": [
            " Sell function: Allows users to sell meme coins before DAO initialization"
          ]
        },
        {
          "name": "storage",
          "arguments": [
            "read",
            "write"
          ]
        }
      ]
    },
    {
      "inputs": [
        {
          "name": "proposal_id",
          "type": 23,
          "typeArguments": null
        }
      ],
      "name": "unlock_votes",
      "output": {
        "name": "",
        "type": 0,
        "typeArguments": null
      },
      "attributes": [
        {
          "name": "storage",
          "arguments": [
            "read",
            "write"
          ]
        }
      ]
    },
    {
      "inputs": [
        {
          "name": "approve",
          "type": 2,
          "typeArguments": null
        },
        {
          "name": "proposal_id",
          "type": 23,
          "typeArguments": null
        },
        {
          "name": "vote_amount",
          "type": 23,
          "typeArguments": null
        }
      ],
      "name": "vote",
      "output": {
        "name": "",
        "type": 0,
        "typeArguments": null
      },
      "attributes": [
        {
          "name": "storage",
          "arguments": [
            "read",
            "write"
          ]
        }
      ]
    },
    {
      "inputs": [
        {
          "name": "amount",
          "type": 23,
          "typeArguments": null
        }
      ],
      "name": "withdraw",
      "output": {
        "name": "",
        "type": 0,
        "typeArguments": null
      },
      "attributes": [
        {
          "name": "storage",
          "arguments": [
            "read",
            "write"
          ]
        }
      ]
    },
    {
      "inputs": [],
      "name": "balance",
      "output": {
        "name": "",
        "type": 23,
        "typeArguments": null
      },
      "attributes": [
        {
          "name": "storage",
          "arguments": [
            "read"
          ]
        }
      ]
    },
    {
      "inputs": [],
      "name": "governance_asset_id",
      "output": {
        "name": "",
        "type": 9,
        "typeArguments": null
      },
      "attributes": [
        {
          "name": "storage",
          "arguments": [
            "read"
          ]
        }
      ]
    },
    {
      "inputs": [
        {
          "name": "proposal_id",
          "type": 23,
          "typeArguments": null
        }
      ],
      "name": "proposal",
      "output": {
        "name": "",
        "type": 17,
        "typeArguments": null
      },
      "attributes": [
        {
          "name": "storage",
          "arguments": [
            "read"
          ]
        }
      ]
    },
    {
      "inputs": [],
      "name": "proposal_count",
      "output": {
        "name": "",
        "type": 23,
        "typeArguments": null
      },
      "attributes": [
        {
          "name": "storage",
          "arguments": [
            "read"
          ]
        }
      ]
    },
    {
      "inputs": [
        {
          "name": "user",
          "type": 4,
          "typeArguments": null
        }
      ],
      "name": "user_balance",
      "output": {
        "name": "",
        "type": 23,
        "typeArguments": null
      },
      "attributes": [
        {
          "name": "storage",
          "arguments": [
            "read"
          ]
        }
      ]
    },
    {
      "inputs": [
        {
          "name": "proposal_id",
          "type": 23,
          "typeArguments": null
        },
        {
          "name": "user",
          "type": 4,
          "typeArguments": null
        }
      ],
      "name": "user_votes",
      "output": {
        "name": "",
        "type": 21,
        "typeArguments": null
      },
      "attributes": [
        {
          "name": "storage",
          "arguments": [
            "read"
          ]
        }
      ]
    }
  ],
  "loggedTypes": [
    {
      "logId": "4213608315170431462",
      "loggedType": {
        "name": "",
        "type": 5,
        "typeArguments": []
      }
    },
    {
      "logId": "8742946235045228304",
      "loggedType": {
        "name": "",
        "type": 7,
        "typeArguments": []
      }
    },
    {
      "logId": "5709232100122337181",
      "loggedType": {
        "name": "",
        "type": 18,
        "typeArguments": []
      }
    },
    {
      "logId": "10485970385165293146",
      "loggedType": {
        "name": "",
        "type": 15,
        "typeArguments": []
      }
    },
    {
      "logId": "13390072562516710654",
      "loggedType": {
        "name": "",
        "type": 3,
        "typeArguments": []
      }
    },
    {
      "logId": "8273611190687524567",
      "loggedType": {
        "name": "",
        "type": 12,
        "typeArguments": []
      }
    },
    {
      "logId": "12590297951544646752",
      "loggedType": {
        "name": "",
        "type": 13,
        "typeArguments": []
      }
    },
    {
      "logId": "16458280083021686236",
      "loggedType": {
        "name": "",
        "type": 6,
        "typeArguments": []
      }
    },
    {
      "logId": "14986885118814259499",
      "loggedType": {
        "name": "",
        "type": 14,
        "typeArguments": []
      }
    },
    {
      "logId": "7297817076571977897",
      "loggedType": {
        "name": "",
        "type": 19,
        "typeArguments": []
      }
    },
    {
      "logId": "4126573213260932900",
      "loggedType": {
        "name": "",
        "type": 20,
        "typeArguments": []
      }
    },
    {
      "logId": "10918704871079408520",
      "loggedType": {
        "name": "",
        "type": 22,
        "typeArguments": []
      }
    }
  ],
  "messagesTypes": [],
  "configurables": []
};

const storageSlots: StorageSlot[] = [
  {
    "key": "02dac99c283f16bc91b74f6942db7f012699a2ad51272b15207b9cc14a70dbae",
    "value": "0000000000000000000000000000000000000000000000000000000000000000"
  },
  {
    "key": "6294951dcb0a9111a517be5cf4785670ff4e166fb5ab9c33b17e6881b48e964f",
    "value": "0000000000000000000000000000000000000000000000000000000000000000"
  },
  {
    "key": "7f91d1a929dce734e7f930bbb279ccfccdb5474227502ea8845815c74bd930a7",
    "value": "00000000000f4240000000000000000000000000000000000000000000000000"
  },
  {
    "key": "8a89a0cce819e0426e565819a9a98711329087da5a802fb16edd223c47fa44ef",
    "value": "0000000000000000000000000000000000000000000000000000000000000000"
  },
  {
    "key": "b48b753af346966d0d169c0b2e3234611f65d5cfdb57c7b6e7cd6ca93707bee0",
    "value": "0000000000000000000000000000000000000000000000000000000000000000"
  }
];

export class MemetroInterface extends Interface {
  constructor() {
    super(abi);
  }

  declare functions: {
    buy: FunctionFragment;
    constructor: FunctionFragment;
    create_proposal: FunctionFragment;
    deposit: FunctionFragment;
    execute: FunctionFragment;
    sell: FunctionFragment;
    unlock_votes: FunctionFragment;
    vote: FunctionFragment;
    withdraw: FunctionFragment;
    balance: FunctionFragment;
    governance_asset_id: FunctionFragment;
    proposal: FunctionFragment;
    proposal_count: FunctionFragment;
    user_balance: FunctionFragment;
    user_votes: FunctionFragment;
  };
}

export class Memetro extends Contract {
  static readonly abi = abi;
  static readonly storageSlots = storageSlots;

  declare interface: MemetroInterface;
  declare functions: {
    buy: InvokeFunction<[], void>;
    constructor: InvokeFunction<[meme_coin_asset: AssetIdInput], void>;
    create_proposal: InvokeFunction<[acceptance_percentage: BigNumberish, duration: BigNumberish, proposal_transaction: ProposalInput], void>;
    deposit: InvokeFunction<[], void>;
    execute: InvokeFunction<[proposal_id: BigNumberish], void>;
    sell: InvokeFunction<[amount: BigNumberish], void>;
    unlock_votes: InvokeFunction<[proposal_id: BigNumberish], void>;
    vote: InvokeFunction<[approve: boolean, proposal_id: BigNumberish, vote_amount: BigNumberish], void>;
    withdraw: InvokeFunction<[amount: BigNumberish], void>;
    balance: InvokeFunction<[], BN>;
    governance_asset_id: InvokeFunction<[], AssetIdOutput>;
    proposal: InvokeFunction<[proposal_id: BigNumberish], ProposalInfoOutput>;
    proposal_count: InvokeFunction<[], BN>;
    user_balance: InvokeFunction<[user: IdentityInput], BN>;
    user_votes: InvokeFunction<[proposal_id: BigNumberish, user: IdentityInput], VotesOutput>;
  };

  constructor(
    id: string | AbstractAddress,
    accountOrProvider: Account | Provider,
  ) {
    super(id, abi, accountOrProvider);
  }
}
