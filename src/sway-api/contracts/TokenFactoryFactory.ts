/* Autogenerated file. Do not edit manually. */

/* eslint-disable max-classes-per-file */
/* eslint-disable @typescript-eslint/no-unused-vars */
/* eslint-disable @typescript-eslint/consistent-type-imports */

/*
  Fuels version: 0.94.8
  Forc version: 0.64.0
  Fuel-Core version: 0.36.0
*/

import { Contract, ContractFactory, decompressBytecode } from "fuels";
import type { Provider, Account, DeployContractOptions, DeployContractResult } from "fuels";

import { TokenFactory } from "./TokenFactory";

const bytecode = decompressBytecode("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");

export class TokenFactoryFactory extends ContractFactory {

  static readonly bytecode = bytecode;

  constructor(accountOrProvider: Account | Provider) {
    super(bytecode, TokenFactory.abi, accountOrProvider);
  }

  deploy<TContract extends Contract = Contract>(
    deployOptions?: DeployContractOptions
  ): Promise<DeployContractResult<TContract>> {
    return super.deploy({
      storageSlots: TokenFactory.storageSlots,
      ...deployOptions,
    });
  }

  static async deploy (
    wallet: Account,
    options: DeployContractOptions = {}
  ): Promise<DeployContractResult<TokenFactory>> {
    const factory = new TokenFactoryFactory(wallet);
    return factory.deploy(options);
  }
}
