/* Autogenerated file. Do not edit manually. */

/* eslint-disable max-classes-per-file */
/* eslint-disable @typescript-eslint/no-unused-vars */
/* eslint-disable @typescript-eslint/consistent-type-imports */

/*
  Fuels version: 0.94.8
  Forc version: 0.64.0
  Fuel-Core version: 0.36.0
*/

import { Contract, ContractFactory, decompressBytecode } from "fuels";
import type { Provider, Account, DeployContractOptions, DeployContractResult } from "fuels";

import { TokenFactory } from "./TokenFactory";

const bytecode = decompressBytecode("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");

export class TokenFactoryFactory extends ContractFactory {

  static readonly bytecode = bytecode;

  constructor(accountOrProvider: Account | Provider) {
    super(bytecode, TokenFactory.abi, accountOrProvider);
  }

  deploy<TContract extends Contract = Contract>(
    deployOptions?: DeployContractOptions
  ): Promise<DeployContractResult<TContract>> {
    return super.deploy({
      storageSlots: TokenFactory.storageSlots,
      ...deployOptions,
    });
  }

  static async deploy (
    wallet: Account,
    options: DeployContractOptions = {}
  ): Promise<DeployContractResult<TokenFactory>> {
    const factory = new TokenFactoryFactory(wallet);
    return factory.deploy(options);
  }
}
